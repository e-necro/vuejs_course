import authApi from"@/api/auth";import{setItem}from"@/helpers/persistanceStorage";const state={isSubmitting:!1,currentUser:null,validationErrors:null,isLoggedIn:null};export const mutationTypes={registerStart:"[auth] registerStart",registerSuccess:"[auth] registerSuccess",registerFailure:"[auth] registerFailure",loginStart:"[auth] loginStart",loginSuccess:"[auth] loginSuccess",loginFailure:"[auth] loginFailure"};export const actionTypes={register:"[auth] register",login:"[auth] login"};export const getterTypes={currentUser:"[auth] currentUser",isLoggedIn:"[auth] isLoggedIn",isAnonymous:"[auth] isAnonymous"};const getters={[getterTypes.currentUser]:state=>state.currentUser,[getterTypes.isLoggedIn]:state=>Boolean(state.isLoggedIn),[getterTypes.isAnonymous]:state=>!1===state.isLoggedIn},mutations={[mutationTypes.registerStart](state){state.isSubmitting=!0,state.validationErrors=null},[mutationTypes.registerSuccess](state,payload){state.isSubmitting=!1,state.currentUser=payload,state.isLoggedIn=!0},[mutationTypes.registerFailure](state,payload){state.isSubmitting=!1,state.validationErrors=payload},[mutationTypes.loginStart](state){state.isSubmitting=!0,state.validationErrors=null},[mutationTypes.loginSuccess](state,payload){state.isSubmitting=!1,state.currentUser=payload,state.isLoggedIn=!0},[mutationTypes.loginFailure](state,payload){state.isSubmitting=!0,state.validationErrors=payload}},actions={[actionTypes.register]:(context,credentials)=>new Promise(resolve=>{context.commit(mutationTypes.registerStart),authApi.register(credentials).then(response=>{context.commit(mutationTypes.registerSuccess,response.data.user),setItem("accessToken",response.data.user.token),resolve(response.data.user)}).catch(result=>{context.commit(mutationTypes.registerFailure,result.response.data.errors)})}),[actionTypes.login]:(context,credentials)=>new Promise(resolve=>{context.commit(mutationTypes.loginStart),authApi.login(credentials).then(response=>{context.commit(mutationTypes.loginSuccess,response.data.user),setItem("accessToken",response.data.user.token),resolve(response.data.user)}).catch(result=>{context.commit(mutationTypes.loginFailure,result.response.data.errors)})})};export default{state:state,mutations:mutations,actions:actions,getters:getters};